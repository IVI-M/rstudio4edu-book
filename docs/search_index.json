[
["index.html", "rstudio4edu A Handbook for Teaching and Learning with RStudio Preface Why rstudio4edu? Who are you? Who are we? Contributing", " rstudio4edu A Handbook for Teaching and Learning with RStudio Alison Hill Desirée De Leon 2019-06-25 Preface Welcome! This handbook was inspired by the Handbook for Teaching and Learning with Jupyter- a book written by and for educators who teach data science. It is a thoughtful and inspiring resource for all educators, with a focus on the Python ecosystem. We aimed to create a similar resource for educators working with the R and RStudio ecosystem. If you do educational work and use tools in this ecosystem, you may have seen a great tutorial made with R Markdown, or attended a streamlined workshop where learning the content was front-and-center and all the headaches around installation and setup were absent. Or maybe you have stumbled upon a polished workshop, book, or course website and thought: “I want to make that too!” So that is what we have set out to do: make a handbook that will fill in those gaps for educators to create educational materials that engage learners, inspire other educators, and most importantly save you time and make it more fun for you to teach. Paraphrasing from Jenny Bryan and Jim Hester’s “What They Forgot to Teach You About R”: “We focus on building holistic and project-oriented workflows that address the most common sources of friction in creating educational materials, outside of doing the teaching itself.” If you find these materials useful, give us a shout-out on Twitter using #rstudio4edu. We hope you do! If you have ideas for ways to improve them, please consider contributing to the project. Why rstudio4edu? Educators from a range of fields use R and RStudio in the “classroom.” But the definition of the “classroom” is changing. The classroom can be an actual one that includes real-time interaction with learners, as in school and university settings. Or the classroom can be a virtual one, where learners interact asynchronously with educational materials. For example, learners on their own time can peruse an online tutorial, or they can attend a remote webinar-style workshop where real-time interactions simply aren’t part of the education experience. Finally, there are temporary classrooms- those that pop up like food truck pods. Learners pick a truck to decide what they want to learn, they get served up some educational materials and enjoy it in real-time with an instructor and other learners. The hope is that they pack up some knowledge “to go boxes” that they will put into practice when the instructor is long gone. We know that people in fields like ecology, sociology, digital history, psychology, biology, genetics, neuroscience, pharmacology, and bioinformatics for education- not just those who teach data science or statistics. Who are you? TO DO: shorten to be more like Greg’s Who did we make this handbook for? We envision that this handbook is for all end-user teachers: teaching may or may not be part of your formal job description, you may not have formal training in how to teach, and you may teach in a formal classroom setting, but you may also teach virtually (via webinars or online tutorials), or perhaps you teach in short but intense bursts like in-person workshops and small-group trainings. In short, if you are a person who needs or wants to create educational materials using R / RStudio, then we hope you’ll find this handbook useful- it is definitely for you. Lucy: Lucy is a professor of neuropsychology who is responsible for teaching her department’s introduction to statistics to 1100 first-year students every year. (Students complain that the Stats department’s introductory course is too theoretical and requires more programming knowledge than they have.) When she finds time for it, her research focuses on color perception in infants. Initially she “fell into” using R by way of her research. She is comfortable using R in her research, but she experiences imposter syndrome, especially when in conversation with colleagues who have had formal training in computer science. She has used R Markdown documents before individually, but has never done more then amass them locally. Lucy already uses R in her own analyses, but in the classroom she’s not sure how to use R to replace in-class activities, assignments, etc. She needs materials to produce content that can be adapted for multiple lessons, repeated use, and allows for interaction. She needs something with enough features that will meet her needs as a “power” educator. Has to be no-fuss for students to be up and running with the materials each class– with so many students, she wants to minimize the instruction time that would be lost to making sure students have the right dependencies, etc. She also needs additional capabilities that her students don’t (grading, tracking student progress, etc). Lucy is juggling half a dozen responsibilities at work, and doesn’t have a lot of time to learn or test out many new systems for delivering her teaching content. Willis: Willis Workshopper is a senior data scientist at his company, which is an online finance enterprise. He is responsible for training his (remote) team, which involves introducing different models and scripts during online session. During team retreats, he will lead workshops in-person, and occasionally goes to local R meetups, where he also leads short workshops in a more casual atmosphere. Willis considers himself an experienced programmer and has formal training in computer science. He uses R all the time in his work related to analysis. He wants a teaching platform for materials that doesn’t have to be template based because each workshop/ training will more or less stand on its own. He’s willing to put in the time to customize his materials to be exactly what he wants for each use case. Materials developed need to be interactive/hands-on and also be well-organized and easily implemented by users in both remote (work team) and in-person (meetups) contexts. He also needs a way for his remote team members to share materials with him on occasion and where he can give them detailed feedback. Willis is often (but not always) creating materials that will be disseminated to a completely remote team. Willis needs to know what R tools are out there for him to deliver his content in a way that his learners will find easy to unpack/ use/ etc. He can be very particular about the way something looks and works, so he needs his tools to have the option of being customizable–he’s not afraid of advanced options. Ona: Ona is the head of a team at a university that assists other researchers and organizations with the design of their research studies and evaluation of their progress. Ona leads a small team of employees that come in with different R skill levels (sometimes none). Ona knows R, but would not call herself a programmer. She does not know anything about web development. She has used R Markdown before at a basic level, but has not anything with it beyond that. She knows how to “knit to HTML” but has been emailing the .html files back-and-forth with team members as a means of sharing. She needs to create materials that will get current members on her team up to speed on R and also serve as an internal knowledge repository for incoming new members. Ona has a limited budget to work with, and her team has limited time for training. Currently, Ona’s team does not have enough time to read books dedicated to R, but they benefit from checking online resources (r-bloggers, r twitter, using cheatsheets etc.). She needs to create an online resource for her team that they can consult at any time, but also so more hand-held guided materials for when new members first onboard. Who are we? This Contributing I love this resource: https://edav.info/contribute.html "],
["intro.html", "Section 1 Introduction", " Section 1 Introduction "],
["teaching-and-learning-with-jupyter-book-review.html", "Section 2 Teaching and Learning with Jupyter Book Review", " Section 2 Teaching and Learning with Jupyter Book Review Good stuff Description of the use cases Screenshots of examples of activities/questions in notebooks (e.g. in Section 2.3.22. Inclusion of ‘pro-tips content’ throughout content I do like the pedagogical patterns section, though I see how including something like this greatly increases the scope of our project. I think what I like most about it, is that they’re concrete examples of creative use-cases. The tips and tricks section I find to be useful, practical advice. In thinking of how this applies toour own project, I think a lot of this could be condensed into little “tips” boxes. Different ways of running Jupyter w/ pros and cons. Useful for educators to know ahead of time Stuff I don’t like as much Needs way more color, pictures, graphics. I think there is too much text for this to be an effective way of “selling” the notebooks. You have to read a lot of prefaces before you get to the practical implementations and concrete examples. Tone is kinda dry Not sure if it’s the layout, but I think just by nature of it being a book, it doesn’t feel like as a user that I can or should skip around to only the sections I need. It’s hard to know which sections will be most useful to me when I “arrive” to this resource. "],
["general-bookdown-questions.html", "Section 3 General Bookdown Questions", " Section 3 General Bookdown Questions What is the main takeaway from the tags (slide 25) in bookdown? "],
["outline-of-content-deliverables.html", "Section 4 Outline of Content &amp; Deliverables 4.1 Works in Progress 4.2 Tutorial Descriptions", " Section 4 Outline of Content &amp; Deliverables 4.1 Works in Progress [WHAT IS THE BEST WAY TO MAKE CODE THIS TABLE?] ## ## Attaching package: &#39;kableExtra&#39; ## The following object is masked from &#39;package:dplyr&#39;: ## ## group_rows Tool Tutorial Demo site GitHub repo Package How to Make a Package NA testpackage RMD site Basic Fundamentals NA NA RMD site Custom Site Tutorial Custom Workshop Site basic-workshop-site RMD site Custom Site Tutorial Custom Course Site basic-course-site RMD site Fancy R Markdown Sites Fancy Workshop Site fancy-workshop-site RMD site Fancy R Markdown Sites Fancy Course Site fancy-course-site 4.2 Tutorial Descriptions 4.2.1 Package Most basic package will start right off the bat with data. 4.2.2 R Markdown Basic Fundamentals Alison Single page tutorial Review syntax + See: items to include 4.2.3 Custom R Markdown Site Applies to both workshops and courses Customization within YAML including these items In two parts (chapters?): How to Build it What to include in it (could be its own chapter– or two?): content to be tailored for Workshop use and Courses use 4.2.4 Add-on: How to Build a Fancy R Markdown Site Applies to both workshops and courses Covers anything that would require CSS 4.2.5 "],
["package-tutorial.html", "Section 5 Package Tutorial 5.1 Is this tutorial for you? 5.2 Why make a package? 5.3 PART 1: Creating bare bones package structure 5.4 PART 2: Including data sets 5.5 PART 3: Including “worksheets” or report templates with R Markdown 5.6 PART 4: Including a LearnR tutorial 5.7 PART 5: FINAL STEPS: 5.8 Troubleshooting 5.9 Miscellaneous / Nice to Know 5.10 Other community resources on package-making:", " Section 5 Package Tutorial 5.1 Is this tutorial for you? Pre-requisites: You have a GitHub account You are comfortable with the basics of using R and RStudio You understand how R projects work You understand the difference between a regular R script and an R Markdown document What you’ll learn: How to make a package that your students can download and install from GitHub How to include a raw data set in your package How to create a custom template in your package that your learners can use for worksheets, training materials, assigment templates, etc. How to give your students access to a custom interactive tutorial/lesson 5.2 Why make a package? As an educator you can use a package to easily deliver the contents of your lesson/ teaching material/ data to an audience. Your package doesn’t have to be on CRAN, and it doesn’t have to contain functions (but it can if you want!). Packages can be used creatively so that you can give your students custom data sets to work with, R Markdown “worksheets” that they can fill in or use as templates for completing exercises. You can also have students run LearnR tutorials with a package. These are interactive R Markdown docs that use Shiny. 5.3 PART 1: Creating bare bones package structure Here we will make a bare bones package that is educator-ready. The final goal will be to create a package that is “downloadable” by your students which means this package needs to have a GitHub repository so that it can be easily shared. 5.3.1 Step 1: Make a GitHub repo for the package If you’re a beginner when it comes to integrating RStudio and Git, then the clearest way to begin making our package is by creating a GitHub repository for our package-to-be and then creating our project in RStudio afterwards. Follow the instructions in the “New project, GitHub first” chapter of Happy Git with R to link your new repo with RStudio, and keep in mind the following as you do so: What’s in a name? It’ll be easiest if you give your GitHub repository the same name that you’d like to give your package. It will make things less confusing. As such, the name you choose must 1) include only letters, numbers, or ., 2) start with a letter, and 3) not end with a . Optionally, you can also consider the naming tips here. Where to put this project directory? Make sure your project directory that we will use to make this package is not nested within any other projects, folders, or repos. It should be its own thing. 5.3.2 Step 2: Create the package in RStudio Below, we distill the more comprehensive resource R packages down to the basics. Now that your GitHub-connected project has been created, it’s time to put in the scaffolding for our bare-minimum package, which will primarily consist of the addition of specific folders and files to our project directory. Though we could do this manually, it’s much easier to rely on helper functions from the usethis package to do this for us. #install.packages(&quot;usethis&quot;) library(usethis) Specifically, we use the create_package() function to create the folders and files we need in the directory of our choosing. Its argument is the path (and consequently, also the name) of our package. Since we are already in the project directory that we’d like to use, we can replace the path with getwd(): [IS THIS HACKY?] create_package(getwd()) The console output will ask if you’d like to overwrite the pre-existing R project. Select No. A new session of RStudio will open, which will appear almost duplicate to the one you had open previously with one important difference: this new one has a Build tab in the pane which also has the tabs Environment, History, etc. This tab is specific for building packages, and we will use it later. You can close the other RStudio instance. You can now confirm that create_package() has created some new files which we see in our Files pane: It is a good idea to commit to GitHub at this point. 5.3.3 Step 3: (Optionally) Edit DESCRIPTION file You can also edit the DESCRIPTION file to fill in the author (your) info and other descriptive info about the package: [Commit again] FYI: At this point in package-making is when you could begin to create custom functions if you wanted to (e.g. as described here and here, but this is not a goal of the present tutorial). 5.3.4 Step 4: Build! [SHOULD WE IGNORE THE CHECK STEP FOR NOW?] [IS LOADING DEVTOOLS ACTUALLY NECESSARY FOR THIS NEXT STEP?] The minimum package structure is in place, and now we go to Build &gt; Install and Restart to make the package “official”. And you’re done!…well, kind of. Your package doesn’t have anything useful in it (yet), but it does exist. [BETTER TO FIRST SUGGEST “LOAD ALL”?] 5.3.5 Step 5: Deliver Anyone can now install your package with the following code, substituting the field in quotes with your own GitHub username and package name: # install.packages(&quot;remotes&quot;) remotes::install_github(&quot;rstudio4edu/testpackage&quot;) We next demonstrate how to include custom data in package. 5.4 PART 2: Including data sets Assuming you have followed the previous steps for building the basic structure of a package, we now demonstrate how to package up some data for your students. 5.4.1 Why do this? What if you’d like your students to work with a specific data set? Should you email them an excel or .csv file or upload it onto an oustide learning platform? No! You can include data sets in your package, ready to be summoned with the call of an object name. This saves precious instruction time that might otherwise be wasted and also helps students get to the fun stuff (analysis!) faster. 5.4.2 Step 1: Add raw data file Call usethis::use_data_raw to create a folder called data-raw. We will use this folder as a general storage space for any raw data files, data pre-processing scripts, etc. that we don’t want to be built into our final package. use_data_raw() This new folder houses a DATASET.R script. Add your raw data file to the data-raw folder. I am adding a .csv file called aggression_behavior.csv. Note: It’s always a good idea to start with the most unprocessed, messy version of the data in the data-raw folder along with scripts to clean it up, so that your workflow is reproducible. 5.4.3 Step 2: Save clean data to data/ Edit the DATASET.R script: Read in the .csv file containing our raw data. Include any code necessary for processing or cleaning to ready the data set as you’d like it to be presented in the package. Run usethis::use_data() which will export an .rda-formatted data file to a new folder, data. Any data in this folder will be accessible to the user. [SHOULD WE MENTION ANYTHING ABOUT HERE::HERE?] ## code to prepare `DATASET` dataset goes here # Read in your .csv file aggression_behavior &lt;- readr::read_csv(here::here(&quot;data-raw&quot;, &quot;aggression_behavior.csv&quot;)) # Include any processing steps here as well # Export to `data/` as .rda file usethis::use_data(aggression_behavior, overwrite = TRUE) # add overwrite option FYI: The reason .rda (also called .RData) files are use in packaged data sets is because this data file format is much faster to read in than .csv files. Your data is now callable! Check that you can access your data. Click Build &gt; Load All Print your data set object: aggression_behavior # A tibble: 214 x 11 focal compound birthyr obyear rank `infant?` attack_all chase_all threatcontact_a… &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; 1 bs9 a1 2003 2008 3 N 0 0 0 2 gk3 a1 1991 2007 1 Y 0 0 0 3 se8 a1 2001 2008 1 N 0 0 0 4 qq8 a1 2001 2008 3 N 0 0 2.23 5 vd8 a1 2001 2008 3 Y 0 0 0.998 6 qv5 a1 1996 2008 3 Y 0 0 0 7 sr8 a1 2001 2008 2 N 0 0 0 8 pk8 a1 2001 2008 2 Y 0 0 0 9 oz4 a1 1994 2008 1 N 0 0 0 10 hv5 a1 1996 2007 2 N 0 0 0 # … with 204 more rows, and 2 more variables: threatnocontact_all &lt;dbl&gt;, agg_in &lt;dbl&gt; &gt; Note: If you later decide to update the underlying raw .csv file, you will have to manually run the script in Step 2 again before re-building, loading, installing the package. The reason is that when packages are built, loaded, installed, etc., any contents in data-raw/ are ignored by default. 5.4.4 Step 3: Document the data set Because this will be a data set that is shared with others, it’s important to add reference documentation for it. Use usethis::use_r() with your data set name in quotes. use_r(&quot;aggression_behavior&quot;) This generates a .R script that lives in the R/ folder. Add information about the data set: In the .R file, add the name of the data set object in quotes. Above the quoted object name, paste in specially-formatted comments (see the example below), called Roxygen comments. Manually edit the information to reflect the columns in your data set. This is what will become our documentation. #&#39; Data of aggression behaviors observed in rhesus macaques #&#39; #&#39; #&#39; #&#39; @format A data frame with 214 rows representing individual &quot;focal&quot; rhesus and 11 variables: #&#39; \\describe{ #&#39; \\item{focal}{character denoting the subject ID of the rhesus} #&#39; \\item{compound}{a character indicating the social group the focal belongs to} #&#39; \\item{birthyr}{dbl denoting focal&#39;s year of birth} #&#39; \\item{obyear}{dbl denoting year of behavioral observation when data were collected on the focal} #&#39; \\item{rank}{dbl denoting high, middle, or low social rank of the focal (1, 2, or 3)} #&#39; \\item{infant?}{character denoting whether or not the focal had an infant less than 1 year old during time of observation} #&#39; \\item{attack_all}{average number of times an attack was intitiated by the } #&#39; \\item{chase_all}{a character string giving given name} #&#39; \\item{threatcontact_all}{a character string giving given name} #&#39; \\item{agg_in}{number of times aggression was initiated by the focal} #&#39; } #&#39; @source aggression_behavior.csv file &quot;aggression_behavior&quot; Note: To read more about Roxygen comments, check out 6.3 Roxygen Comments, R Packages. Use devtools::document() to make the roxygen comments “concrete”. #install.packages(c(&quot;devtools&quot;, &quot;roxygen2&quot;)) library(roxygen2) library(devtools) document() This generates a .Rd file, that makes our documentation accessible to the package. [PHRASING?] This file lives inside a newly-generated man/ folder. Now we can check that our documentation works: Call ? aggression_behavior, substituting the name of your data set. If everything looks good, then you’re done! If not, edit the roxygen-style comments in the .R file and document() again until you’re satisfied. 5.4.5 Step 4: Build and install As before, click on Install and Restart under the Build tab. Here’s a review of all the data package steps so far: Congratulations, your package now includes a documented data set! It can be downloaded and installed as recommeded in Step 5: Deliver of Part 1. If you’d like to create a worksheet-like component for your package, continue with Part 3. Otherwise, skip to Final Steps for some recommendations on a couple final (and optional) package components. 5.5 PART 3: Including “worksheets” or report templates with R Markdown 5.5.1 Why do this? An .Rmd template is essentially the replacement for a worksheet. It is a partially-filled out R Markdown file that you can create. You can create a template for every homework assignment or exercise that you want your students to work through. And they can access all of these templates easily when they go to File &gt; New File &gt; R Markdown. And then select From Template from the dialogue box menu. Your custom R Markdown template will appear there. You can make a couple templates for general use cases (e.g. “Homework”, “Reports”, “Final Project”) or you can make as many very specific templates populated with questions or tailored excercies (e.g. “Lesson 1 Excerices”, “Problem Set 2”). As a rough outline, to make your first template you will: Use a usethis function use_rmarkdown_template() to create the necessary directory and file structure within your package. Modify the template. Save, Build, Install, and Restart. [DESCRIBING THE SPECIFICS OF RMARKDOWN BASICS IS OUTSIDE OF THE SCOPE OF THIS TUTORIAL. NEED TO LINK TO GOOD BASIC RESOURCE FOR THIS] 5.5.2 Step 1: Create files and folders I assume you have already created the basic package infrastructure from Part 1. Run use_rmarkdown_template(template_name = &quot;&lt;your-template-name&quot;) use_rmarkdown_template(template_name = &quot;Worksheet1&quot;) ✔ Setting active project to &#39;/Users/desiree/Documents/New R Projects/testpackage&#39; ✔ Creating &#39;inst/rmarkdown/templates/worksheet1/skeleton/&#39; ✔ Writing &#39;inst/rmarkdown/templates/worksheet1/template.yaml&#39; ✔ Writing &#39;inst/rmarkdown/templates/worksheet1/skeleton/skeleton.Rmd&#39; &gt; This creates a new folder in the root package directory inst/ with several subdirectories. 5.5.3 Step 2: Create your template Edit skeleton.Rmd inside inst/rmarkdown/templates/&lt;your-template-name&gt;/skeleton/. This is what you’re users will see. consider what you’d like the output format to be. To see some examples of how here. You can also include a description of your template in the template.yaml file in the parent directory skeleton/. But this is not critical to getting the template into the package. Save, Build &gt; Install and Restart You can get ideas for how minimal .Rmd templates can be customized by checkout out a few example templates here. 5.5.4 Step 3: Confirm that your template is accessible Once your R session has been restarted, navigate to File &gt; New File &gt; R Markdown. Select From Template from the dialogue box menu. Your custom R Markdown template will appear there. Voilà! Tip: You can continue to add new .Rmd templates to your package throughout your course. When you do, ask students to update the package, and they will access to the new templates. [INSERT DAVID MEZA QUOTE] We next show you how you can introduce a special type of .Rmd document in your package: a LearnR tutorial. 5.6 PART 4: Including a LearnR tutorial 5.6.1 Why do this? LearnR tutorials are interactive R Markdown documents that allow you to incorporate code exercises as well as elements like videos and quizzes. There are many possibilities, and we point you to other resources to see various examples of these tutorials in action. The nice thing about this tool is that students can play around with code and preview various concepts outside of the RStudio IDE. One possible use case would be when you would like to introduce broader concepts in an interactive way before students begin focusing on the programming and coding aspects of the concepts within a regular .Rmd document. 5.6.2 Step 1: Create files and directories As before, I assume you have at a minimum created the basic package structure from Part 1. Install the learnr package Run use_tutorial(&quot;&lt;name-of-tutorial-file&gt;&quot;, &quot;&lt;title-you'd-like-the-user-to-see&gt;&quot;, open = interactive()) remotes::install_github(&quot;rstudio/learnr&quot;) use_tutorial(&quot;Lesson1&quot;, &quot;My Title&quot;, open = interactive()) This adds a tutorial folder to the inst directory. 5.6.3 Step 2: Customize your tutorial The .Rmd file inside the tutorial folder is automatically opened. Edit it to customize your tutorial content. Click Run Document next to the little green arrow in the toolbar of the .Rmd file. This will generate a .html file in the same directory as the tutorial .Rmd file and also run your tutorial locally. 5.6.4 Step 3: Add additional subdirectory At the time of writing, there is one additional folder that needs to be added, which use_tutorial did not create for us. Within the subdirectory tutorials/, add a new folder with the same name as your .Rmd tutorial file. Move your tutorial .Rmd file and the .html for your tutorial into this new folder. Build &gt; Install and Restart 5.6.5 Step 4: Run your tutorial Run your tutorial with run_tutorial(&quot;&lt;tutorial-name&gt;&quot;, &quot;&lt;package-name&gt;&quot;). learnr::run_tutorial(&quot;Lesson1&quot;, &quot;testpackage&quot;) The above line of code is also how your users will be able to run your tutorial once they have installed your package. If you get errors, double check that your structure for the tutorial folders and files matches that of those in the testpackage repository. Make sure you Build, Install, and Restart before trying again. 5.7 PART 5: FINAL STEPS: 5.7.1 (Optionally) Document the package as a whole We created documentation for the data set, but not for the package overall. To do so: Run usethis::use_package_doc() Edit the associated .R script that is generated in R/ with roxygen-style comments See section 6.6 here and here for examples of what to include. Don’t forget to run document() to update the documentation #install.packages(c(&quot;devtools&quot;, &quot;roxygen2&quot;)) library(roxygen2) library(devtools) document() Re-Build and install your package Check that package documentation works by typing ? &lt;package-name&gt; substituting your own package name. 5.7.2 Create a README.Rmd file You can include additional information in a README.Rmd file for your package. At a minimum, you should include a line about how to install, using the guidelines from Part 1: Deliver. Run use_readme_rmd() &gt; use_readme_rmd() ✔ Writing &#39;README.Rmd&#39; ✔ Adding &#39;^README\\\\.Rmd$&#39; to &#39;.Rbuildignore&#39; ● Modify &#39;README.Rmd&#39; ✔ Writing &#39;.git/hooks/pre-commit&#39; Edit to meet your needs. Click Knit, so that it updates the corresponding README.md file Commit and push. 5.8 Troubleshooting If you run into rough patches, here are some common pitfalls that might be resulting in errors: Do you have most up-to-date version of your packages? Try installing the development version of the package from github. Here’s an example of what that looks like for the usethis package. # install.packages(&quot;devtools&quot;) devtools::install_github(&quot;r-lib/usethis&quot;) Are you running the most current version of R and/or RStudio? Did you install R via homebrew? –&gt; Uninstall and install from CRAN! 5.9 Miscellaneous / Nice to Know If you didn’t start with a repo, then you should use usethis::use_github() Licensing educational materials [ASK GREG] 5.10 Other community resources on package-making: You can find a diversity of additional helpful resources and tutorials on making R packages. We list a few below: Hilary Parker on basic package functions: bare-bones function making Writing an R package from scratch : Follows up on Hilary’s but incorporates usethis() Taking your data to Go: Straightforward, concise tutorial on data packages R Package Primer "],
["r-markdown-custom-site-tutorial.html", "Section 6 R Markdown Custom Site Tutorial 6.1 Is this tutorial for you? 6.2 Mental framework: what are we going to make here? 6.3 Part 1: Getting Set up 6.4 Part 2: Create your content 6.5 Part 3: Dress it up! 6.6 Part 5: Make it a living, breathing, shareable site! 6.7 Workflow for maintenance 6.8 Pros and Cons of using R Markdown sites 6.9 Community Resources:", " Section 6 R Markdown Custom Site Tutorial This is a tutorial intended for folks who would like to put together a site to help them organize and deliver their teaching materials to their participants. Using R Markdown, you can put together a bare-bones site in no time at all. Here, we will show you an example of how to do this by making a demo R Markdown site. You can follow along with this tutorial, or if you’d like to get up and running as quickly as possible, you you can download the repository containing the demo site and modify it as much as you’d like. 6.1 Is this tutorial for you? Pre-requisites: You have a GitHub account You are comfortable with the basics of using R and RStudio You understand how R projects work You understand the difference between a regular R script and an R Markdown document What you’ll learn: How to compile multiple R Markdown websites into an R Markdown site How to add basic customization through themes using built in options How to publish your R Markdown pages for free via GitHub Pages 6.2 Mental framework: what are we going to make here? We’re about to make a website out of R Markdown documents. There are a few key pieces of magic that separate a regular collection of R Markdown documents from a living, breathing website: A _site.yml text file that will stitch your .Rmd documents together and place an official-looking navigation bar at the top of them. An R Markdown file with the name index.Rmd file, which will become your site’s homepage. After we’ve pushed all our files to GitHub, we turn on GitHub Pages with the click of a button to make our work go live! Let’s get started! 6.3 Part 1: Getting Set up We’ll use the usethis package: #install.packages(&quot;usethis&quot;) library(usethis) 6.3.1 Two getting-started workflows: We recommend following the tips on Happy Git with R and starting in GitHub before switching to RStudio: Create a GitHub repo for your work. Check Initialize this repository with a README. In the dropdown menu Add .gitignore: choose R [CAN PROBABLY REMOVE] Click the green Clone or Download button, and copy the URL. Open RStudio. Click File &gt; New Project &gt; Version Control&gt; Git. Paste the copied URL. Click Create Project. Use rmarkdown:::site_skeleton(getwd()) (note that we use ::: here, with three colons!) to generate important infrasctructure files we need. Though we recommend a “GitHub first” workflow, it is possible to start with RStudio project wizard to create a new R Markdown site and then move to GitHub: Click File &gt; New Project &gt; New Directory. Scroll down and select Simple R Markdown Website. Then, optionally: usethis::use_git() usethis::use_github() # you have to have a PAT setup [NEED TO FILL IN ^ DETAILS] Regardless of which workflow you choose, you will end up with the following files in your working directory. The only critical ones are the index.Rmd and the _site.yml. [DO WE SAY RENDER SITE NOW? BUT THEN WILL LATER NEED TO TELL FOLKS TO DELETE SITE FOLDER?] 6.4 Part 2: Create your content 6.4.1 Make some changes and push to GitHub Open _site.yml and add the output_dir: &quot;docs&quot; on its own line, under name:. Save. Optionally, open index.Rmd and add some more text to the body of the document. Click Knit to preview your page locally. This will become the “landing page” of your site. Locate the RStudio pane that has a tab labelled Git, and click on it. Check the box(es) under the “Staged” column, click Commit. Add a commit message, and then click Push. 6.4.2 Add additional R Markdown documents Let’s create at least one other R Markdown document, so that we have more content we can compile in our website. We’re going a bit above and beyond here since the minimally-viable R Markdown site can me made with a just a single .Rmd plus a _site.yml file (which we’ll set up in the next section). Add additional R Markdown documents (File&gt; New File &gt; R Markdown), and you can save your .Rmd file with whatever file name you’d like (we recommend avoiding using spaces). For this tutorial, I’m going to name my additional.Rmd file materials.Rmd. Stage, Commit, and Push to GitHub. You can repeat this process, adding as many new .Rmd files as you’d like. 6.4.3 Stitch it together [MODIFY TO ACCOUNT FOR ABOUT PAGE/ USE_SKELETON SEQUENCE] Now we’ll modify the YAML (i.e._site.yml) file, which is what will allow all of our R Markdown page(s) to be pulled together as a site. Instead of each of our individual R Markdown documents needing their own YAML header at the top, we will put all of the YAML info that all our pages shared in common (e.g. output: html_document) into our _site.yml page– one YAML to rule them all. Through this YAML, we’ll also add the navigation bar to the site, which will have a link to each .Rmd document. In the .yml file, copy and paste what you see below, paying careful attention to the indentations and spaces. YAMLs are fussy about this, and this is often the source of many ERRORS! Edit the navigation bar (a.k.a. navbar). For each link you would like in your navbar, create one - text: and href: pair. The - text: part is what the link name that the user will see; it can be called whatever you want The href: part must be the file name you want to link to with the .html file extension. Add additional - text: and href: pairs if you have more R Markdown pages that you want in the navbar. Aaaand ACTION! Type rmarkdown::render_site() in the Rstudio console. This stitches everything together and allows you to view the site on your locally (it’s not live yet). render_site() is basically the same thing as clicking Knit on all of your R Markdown documents simultaneously. If the rendered site does not open up automatically in a new window, you can go to the docs/ folder in your project, click on the index.html file, and View it in Web Browser. It’s a good idea to stage, commit, and push to GitHub at this point. name: &quot;My 1st Workshop Site&quot; output_dir: &quot;docs&quot; navbar: title: &quot;My Website&quot; left: - text: &quot;Home&quot; href: index.html - text: &quot;Materials&quot; href: materials.html output: html_document: FYI: When we knit or render_site(), R Markdown’s deliverable to us is going to be an HTML file for every .Rmd file in our R Project. The output_dir: &quot;docs&quot; line is important because it tells R Markdown where to put all of our freshly minted HTML files and any extras the HTMLs will need (images we include, etc.). In this case, it’s a docs/ folder. I kind of think of this folder as the boarding and gate areas of an airport–contents of this folder have gone through security clearance (rmarkdown::render_site()), ridden of items not approved for flight (.Rmd files), and are awaiting takeoff (getting rendered as a live site). You cannot skip airport-security to get to your gate, and similarly, we should not put files in the docs/ folder ourselves. 6.5 Part 3: Dress it up! Optionally, you can easily change the way your site looks and feels by adding a few things to the YAML section, e.g. template themes and highlight styles (for highlighting code). We preview some below, but you can read about a few more here. Let’s try some out. 6.5.1 Theme and Code Highlighting Open the _site.yml file. Add the following on their own lines underneath html_document: and indent them twice: Change the theme: theme: &lt;insert-theme-name&gt; Theme options: default, cerulean, journal, flatly, darkly, readable, spacelab, united, cosmo, lumen, paper, sandstone, simplex, and yeti. Change the highlight style: highlight: &lt;insert-style-name&gt; Highlight styles: default, tango, pygments, kate, monochrome, espresso, zenburn, haddock, and textmate. [INCLUDE PREVIEW OF EACH OF THESE OR LINK OUT] Run render_site() to see your changes. 6.5.2 Create a Table of Contents [Before and After Example] In the _site.yml file, add a table of contents sidebar:** toc: true Your dressed up _site.yml file should look something like this: name: &quot;My 1st Workshop Site&quot; output_dir: &quot;docs&quot; navbar: title: &quot;My Website&quot; left: - text: &quot;Home&quot; href: index.html - text: &quot;Materials&quot; href: materials.html output: html_document: theme: flatly highlight: tango toc: true toc_float: true With these YAML settings, after executing rmarkdown::render_site(), your site should look something like this: INSERT SCREEN SHOT Many other customizations can be handled within the body of the R Markdown documents themselves. Here are some ways you can do that: Add white space in between sections. I usually include additional line breaks in the body of every of my R Markdown documents before each of my section headers. This is done with a &lt;br&gt; on its own line before every header. Note that each &lt;br&gt; has to be followed by a blank line for the &lt;br&gt; to work. I find that this improves readability, helps give the page more “breathing room”, and in general makes the page feel less weighed down by sections that are squished up against one another. You can tweak your current site endlessly at this stage by adding more content, code chunks, or formatting text. Don’t forget to push to GitHub! 6.6 Part 5: Make it a living, breathing, shareable site! Now we’ll go back to GitHub and tell it where to find our website-ready files: Back on GitHub, click the Settings tab of your repository. Scroll down until you get to “GitHub Pages”, and select “master branch/docs folder”. 6.7 Workflow for maintenance Once you have the website in place, it’s likely that you will want to update it periodically or add new pages. Here’s what that workflow looks like for me: Open my existing site RStudio project Run rmarkdown::render_site to inspect the site in its current state and see where I’ve left off. Create a new .Rmd document and add any new content. Delete redundant YAML information from this new .Rmd (i.e. output:). Knit this document to make sure everything looks good. Open _site.yml and add my new document to the navbar. Note: It’s very easy to forget this step!! Run rmarkdown::render_site to stitch everything together. Push all changes to GitHub. 6.8 Pros and Cons of using R Markdown sites Pros: Simple structure that allows you to put something content together pretty quickly. Minimal additions (really, just 2 files) are needed to go from a collection of regular R Markdown documents to a site. Ideal for setting up sites that do not need complex organization or many pages (i.e. for workshops). Easy to customize without any knowledge of web design or CSS if you’re okay sticking to the templates. Cons: The simple structure of RMarkdown websites can make building more complexly organized sites more challenging (i.e. there is not a way to organize files so that they fall under the umbrella of a more overarching page. All R Markdown docs and pages will be on the same “level” or website organization). As the number of pages you want to build increases, your project directory will become increasingly crowded. Customizing beyond the boundaries of the built-in templates means your going to have to play around with some CSS. Depending on what you enjoy–this might not actually be a con. 6.9 Community Resources: 6.9.1 Existing tutorials: Chapter 5, Webpages: Includes some overview of adding images, changing global style settings, etc. Creating Website in R: Includes description of how to add a personal domain name. Making free websites with RStudio’d R Markdown: A how to that also includes descriptions of the RStudio GUI layout and an overview of Markdown syntax. Personal Website tutorial 6.9.2 General set up: GitHub and Rstudio: Step-by-step guide on publishing .Rmd docs to GitHub, includes working with local branches and using the terminal tab within R. R Markdown: The Definitive Guide: The official, very thorough but often technial, resource for R Markdown. Treat this as more of a reference text. 6.9.3 Formatting R Markdown cheatsheet Pimp my RMD: smattering of examples of different ways to format R Markdown documents. Includes adding equations, figure captions, etc. "],
["r-markdown-workshop-sites.html", "Section 7 R Markdown Workshop Sites 7.1 Some extra cool stuff we’ve seen", " Section 7 R Markdown Workshop Sites Here are some components that your workshop site should have. General Information: Where, When, Requirements (i.e. “bring a laptop, install this software”), Code of Conduct, Accesibility info, Schedule Syllabus/ Learning Objectives Pre-Work/ Setup info (what packages to install) Access to Lesson Materials (via link, download, or package) Here are some examples of three different workshop sites that use these components (not necessarily made in R Markdown, but just to give you an idea of what you should be putting in yours.) Software Carpentry Template anglea-li/sotmus-r: Simple, clean layout for workshop info. It’s only a README.md! Here’s how you can build each of these components: 7.0.1 Thing 1 7.0.2 Thing 2 7.0.3 Thing 3 Here’s a link to a bare bones demo workshop site that we’ve made and it’s repository. Here’s a link to a bare bones demo workshop site that we’ve made and it’s repository. 7.1 Some extra cool stuff we’ve seen Having the Schedule times determined by a script #R Markdown Course Sites Here are some components that your course site should have. Course Overview Syllabus info Lecture Content (e.g. slides) Assigned readings Lab Content Assignments Possilby a grading dashboard (more info) Here are some examples of three different course sites that use these components (not necessarily made in R Markdown, but just to give you an idea of what you should be putting in yours.) https://datasciencebox.org/hello/ https://cslu.ohsu.edu/~bedricks/courses/cs631/#Description Here’s how you can build each of these components: 7.1.1 Thing 1 7.1.2 Thing 2 7.1.3 Thing 3 Here’s a link to a bare bones demo workshop site that we’ve made and it’s repository. Here’s a link to a bare bones demo workshop site that we’ve made and it’s repository. "],
["some-extra-cool-stuff-weve-seen-1.html", "Section 8 Some extra cool stuff we’ve seen", " Section 8 Some extra cool stuff we’ve seen "],
["fancy-r-markdown-sites.html", "Section 9 Fancy R Markdown Sites 9.1 Going further with customization 9.2 Anatomy of a blinged out R Markdown page. 9.3 CSS crash course 9.4 Navigation Bar related stuff 9.5 Add a hero image (banner image) 9.6 Global Aesthetics 9.7 Customize your link appearance", " Section 9 Fancy R Markdown Sites 9.1 Going further with customization Once you’ve built the basic structure for your R Markdown site, if you’d like to customize it even further, here are a handful of things you can add! We’ll go over The steps below involve a little bit of HTML and CSS work, but you don’t have to have much experience in these methods to be able to build something cool. 9.2 Anatomy of a blinged out R Markdown page. [INSERT ANNOTATED SCREENSHOT OF BLINGED OUT R MARKDOWN PAGE. ANNOTATIONS CORRESPOND TO SECTION HEADERS] 9.3 CSS crash course Every element of a website that you see, from links to pictures to paragraphs, has a category label. These labels can be tags (for example, all links on websites have a tags, all big headers have h1 tags), or they can be IDs or classes (described later). If you know the label for something on a website, then you can style its appearance by using a .css file. In a CSS file, you write style rules that will apply to all elements of the same category. This is a very useful thing to be able to do because it allows you to break free from the limitations of built-in templates and themes that come with R Markdown. Below is a quick example of CSS that would change all link colors to white and all link text from being uppercase: a { color: white; text-transform: uppercase; } 9.3.1 How do you find out an element’s category? Using a browser’s developer tools, 9.3.2 Inspector tool 9.4 Navigation Bar related stuff 9.4.1 Add a logo 9.4.2 Add a drop down menu 9.4.3 Tab sets? 9.5 Add a hero image (banner image) 9.6 Global Aesthetics 9.6.1 Customize your fonts with Google Fonts 9.7 Customize your link appearance "],
["backlog.html", "Section 10 Backlog", " Section 10 Backlog Anchor headings Copy/ Paste clipboard "],
["timeline.html", "Section 11 Timeline", " Section 11 Timeline Here we can put weekly goals to make sure we are staying on target. Complete by the end of: Week 12 (Aug 23): Week 11 (Aug 16): Week 10 (Aug 9): Week 9 (Aug 2): Week 8 (July 26): Week 7 (July 19): Week 6 (July 12): Week 5 (July 5): Week 4 (June 28): Outlining RMD tutorial Week 3 (June 21): "],
["references.html", "References", " References "]
]
