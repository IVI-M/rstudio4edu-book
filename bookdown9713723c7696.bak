# Create a data package {#data-pkg}


This tutorial is intended for educators who would like to learn to make a data package.

**Why do this?**

What if you'd like your students to work with a specific data set? Should you email them an excel or .csv file or upload it onto an oustide learning platform? No! You can include data sets in your package, ready to be summoned with the call of an object name. This saves precious instruction time that might otherwise be wasted and also helps students get to the fun stuff (analysis!) faster.

<center>![](images/pkg/barebones.jpg){width=350px}</center>

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Is this tutorial for you?

```{r child="modules/is-this-tutorial-for-you.Rmd"}

```

* How to make a package that your students can download and install from GitHub
* How to tidy up an existing dataset and put it in a package
* How to include a raw data set in your package

## Mental Framework: What are we going to make here?
To create a package with data that is ready for our learners, we're going to make four new folders that will contain (1) our raw data files, (2) any scripts for cleaning up our data, (3) commented documentation of our data, and (4) cleaned up documentation of our data. Finally, we'll pull it all together when we (5) build all of these things into our package. 

We can think of this process of putting data in a package as kind of like getting a fish ready to be used in a sushi roll at a nice restaurant. 

<center>![](images/pkg/Sushi-overview.jpg){width=600px}</center>

\

üé£ `data_raw/`: this is your fish

üç£ `data/`: this is your sushi roll (re: some additional data prep here like wrangling, and final object gets "rolled up" into a nice clean .rda file)

üìù `R/`: write up your menu- what is inside of your roll?

üç± `man/`: this is the chef giving you the tableside context for what you've ordered and what it pairs well with


Let's go through this process!


## Part 1: Getting set up

### Packages

Make sure you've installed and loaded the following packages:

```{r, eval=FALSE}

#install.packages(c("usethis", "devtools", "roxygen2"))
library(devtools)
library(roxygen2)
library(devtools)


```

You may also want to consider installing and loading `here::here()`:

```{r, eval = FALSE}
# install.packages("here")
# here::here()
```

### Two getting-started workflows

Our final goal is to create a package that is "downloadable" by your students, which means this package needs to have a GitHub repository so that it can be easily shared. See our tips below for what to name your project repository.

:::tip
**What's in a name?** Name your GitHub repository whatever you want to name your data package. It will make things less confusing. As such, the name you choose must:

* Include only letters, numbers, or `.`
* Start with a letter
* Not end with a `.` 
* Optionally, consider the naming tips **[here](https://r-pkgs.org/package-structure.html)**
:::

:::rstudio-tip
**Where to put this project directory?** Make sure your project directory that we will use to make this package is not nested within any other projects, folders, or repos. It should be its own thing.
:::

```{r child = 'modules/github-first-project.Rmd'}

```

```{r, eval=FALSE}
create_package(getwd())
```


The console output will ask if you'd like to overwrite the pre-existing R project. Select *No*. 

<center> ![](images/pkg/create_package_ss.png){width=400px}</center>


A second session of RStudio will open -- this ession has a *Build* tab in the pane which also has the tabs *Environment*, *History*, etc. This tab is specific for building packages, and we will use it later. You can close the other RStudio instance.

<center> ![](images/pkg/build_tab.png){width=500px} </center>


It is a good idea to commit to GitHub at this point. 

\
Though we don't recommend starting this way, it is possible to first make a data package project in RStudio and then connect it to GitHub afterwards.

1.  Click *File* > *New Project* > *New Directory*
1.  Scroll down and select *R Package*
1.  Select a package name (see tip above) and click *Create Project*
1.  Then, optionally:

```{r, eval = FALSE}
usethis::use_git()
usethis::use_github() # you have to have a PAT setup
```

\
Regardless of which workflow you choose, your project directory should end up looking like this:

<center>![](images/pkg/cp_files.png){width=400px}</center>

We have a few package-specific files set up now-- in our sushi analogy, this is like us purchasing an empty restaurant-- some infrastructure is there, but there's nothing in the kitchen yet!

<center>![](images/pkg/Sushibuilding.jpg){width=400px}</center>
 
 
## Part 2: Add some clean data

### With built-in data
Let's say we want our learners to be able use a [built-in dataset](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/00Index.html) like [`anscombe`](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/anscombe.html), but we'd like to modify it first. Any clean up `.R` scripts or miscellaneous files that we use for pre-processing will need a place to live within our package. Where do these files go? In a folder called `data-raw/`. 

1.  Let's create the `data-raw/` folder:

```{r, eval=FALSE}
usethis::use_data_raw()
```

[commit]

The `data-raw/` folder is like the pantry (?) of our sushi restaurant-- we can put anything we want in here, and it won't directly impact our final package.
\

2. Go to *File* > *New File* > *R Script* and read-in any data set you'd like along with any clean up steps. (Alternatively, you could add your clean-up script to the `DATASET.R` that gets auto-generated inside of the `data-raw/` folder--but we recommend naming your `.R` script to be something that corresponds with the name of your dataset.)

```{r, eval = FALSE}
anscombe_set1 <- anscombe[c(1, 5)]
```
This is you bringing in the raw fish (raw data set -- `anscombe`) to the kitchen and getting them ready for consumption!

\

3. At the end of this script, include the following line, replacing `anscombe_set1` with your own cleaned dataset.

```{r, eval= FALSE}
use_data(anscombe_set1, overwrite = TRUE)
```
\

4. Run this script and save this `.R` script inside `data-raw/`. The outcome should be a cleaned up `.rda` data file in a new folder called `data/`. 

[commit]

[SCREENSHOT]


This `.rda` file is your (data) sushi roll! It's cleaned and ready to be accessed via your package!

5. To confirm this, load your package locally by going to the *Build* pane > Click *More* > *Load All*. 

<center>![](images/pkg/load_all.png){width=400px}</center>

This is the same as running `devtools::load_all()` in the console. 

If everything worked, you should be able to call your cleaned data set successfully!
```
> anscombe_set1
   x1    y1
1  10  8.04
2   8  6.95
3  13  7.58
4   9  8.81
5  11  8.33
6  14  9.96
7   6  7.24
8   4  4.26
9  12 10.84
10  7  4.82
11  5  5.68
```

üéâ Nice! With these steps, you've managed to go from raw fish to the packaged-up sushi roll! Wait..but what if you want to catch your OWN fish?? üé£ We hear you-- using your own data is important as an educator so you can tailor the data to your lesson content --**can you put your own data files in a package? YES!** Let's go fishing!


### Start with your OWN Data

Let's show you how to save your own `.csv` to the `data-raw/` folder. As an example, we'll be using a `shrimp.csv` containing [data on seafood prices](https://www.pnas.org/content/114/7/1512/tab-figures-data). 

1. Save your raw `.csv` file to your `data-raw/` folder. (Remember, this folder is our pantry.) üêü
2. Make a new `.R` script (again, manually saving to the `data-raw/ folder`) and name the `.R` script something like `<your-data>_load.R`.
3. In this script, read in your raw `.csv` file and do any data tidying and cleaning [analogy: fish chopping block?] if you need to. 
```{r, eval =FALSE}

# shrimp_load.R

library(tidyverse)

shrimp_raw <- readr::read_csv("data-raw/shrimp.csv")

# Add any tidying steps to this script if necessary
shrimp <- shrimp_raw[-c(1:2),]
colnames(shrimp) <- c("Year", "Month", shrimp_raw[1,3:10])
shrimp <- readr::type_convert(shrimp)

```

:::tip
**Note**: It's always a good idea to start with the most unprocessed, messy version of the data `.csv` in the `data-raw/` folder along with scripts to clean it up so that your workflow is reproducible. 
:::

:::tip
Forget about specifying paths-- use `here::here()`. For example:

`shrimp <- readr::read_csv(here::here("data-raw", "shrimp.csv"))`
:::



4. Once you've got your dataset the way you want it, export it as an `.rda` file to the `data/` folder üç£. Once again, `use_data()` takes care of this for us as the last line in our `.R` script.

```{r, eval =FALSE}

usethis::use_data(shrimp, overwrite = TRUE)

```

:::tip
**FYI**: The reason .rda (also called .RData) files are use in packaged data sets is because this type of data file format is much faster to read in than `.csv` files.
:::

5. Trust but verify that your data set made it in your package by loading the package (*Build* pane > Click *More* > *Load All* or in the console using `devtools::load_all()`). And then call your dataset! 

```
> shrimp
# A tibble: 243 x 10
    Year Month `0-15` `15-20` `20-25` `25-30` `30-40` `40-50` `50-67` Pieces
   <dbl> <dbl>  <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>  <dbl>
 1  1990     1   5.76    4.53    3.86    3.51    3.19    2.84    2.54   1.91
 2  1990     2   5.96    4.60    3.90    3.66    3.36    2.93    2.66   1.99
 3  1990     3   6.34    4.75    4.17    3.87    3.56    3.41    3.18   2.46
 4  1990     4   6.06    4.90    4.27    3.97    3.70    3.20    2.91   1.78
 5  1990     5   5.83    4.83    4.46    4.04    3.64    2.96    2.17   1.19
 6  1990     6   5.82    4.79    4.38    3.88    3.27    2.71    2.24   1.45
 7  1990     7   5.92    4.99    4.36    3.54    2.88    2.51    2.17   1.65
 8  1990     8   5.56    4.85    4.27    3.50    2.93    2.45    2.14   1.60
 9  1990     9   5.91    5.00    4.42    3.76    3.14    2.66    2.34   1.75
10  1990    10   6.31    5.30    4.67    4.18    3.45    2.97    2.66   1.96
# ‚Ä¶ with 233 more rows
```

It works! 

## Part 3: Check!

Now we can check and see whether there are any issues with our package. 

6. In the RStudio *Build* pane > click *Check*.  

```
‚îÄ‚îÄ R CMD check results ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ testpackage 0.0.0.9000 ‚îÄ‚îÄ‚îÄ‚îÄ
Duration: 7.2s

‚ùØ checking DESCRIPTION meta-information ... WARNING
  Non-standard license specification:
    What license it uses
  Standardizable: FALSE

‚ùØ checking for missing documentation entries ... WARNING
  Undocumented code objects:
    ‚Äòanscombe_set1‚Äô ‚Äòshrimp‚Äô
  Undocumented data sets:
    ‚Äòanscombe_set1‚Äô ‚Äòshrimp‚Äô
  All user-level objects in a package should have documentation entries.
  See chapter ‚ÄòWriting R documentation files‚Äô in the ‚ÄòWriting R
  Extensions‚Äô manual.

‚ùØ checking data for ASCII and uncompressed saves ... WARNING
    Warning: package needs dependence on R (>= 2.10)

0 errors ‚úî | 3 warnings ‚úñ | 0 notes ‚úî
```

This spits back a lot of output, including some warnings! But don't feel overwhelmed. This is okay and is only happening because we have not documented anything in our package yet (our sushi üç£ is made, but the menu üìù is not!) --and in fact, if we wanted to, we could still use this package despite the warnings and commit/push to GitHub as is. 

You should document your data sets anyway because it will save you time and help your learners if they're able to use `?dataset` to see all get information about what's inside.

## Part 4: Document 

We'll go through an example of documenting our `shrimp` dataset, but you can do this for any data set in your package. 

7. Use `usethis::use_r()` with your data set name in quotes, which will generate a new `.R` script that lives in an `R/` folder. 

```{r, eval= FALSE}

usethis::use_r("shrimp")
```

8. In this new `.R` script, type the name of your dataset in quotes. Immediately above this, manually (*yes, manually*) copy and paste-in specially-formatted comments called Roxygen comments (use our example below). These strange-looking comments will eventually become our documentation. 

```{r, eval = FALSE}
#' Data of nominal brown shrimp prices by size, 0-15 shrimp per pound, 15-20 shrimp per pound, etc. 
#'
#' A smaller number per pound indicates larger shrimp. Nominal prices are total monthly value of brown shrimp #' landings within the #' size class divided by total monthly landings within the size class. 
#'
#' @format A tibble with 243 rows and 10 variables:
#' \describe{
#'   \item{Year}{dbl Year price was recorded}
#'   \item{Month}{dbl Month price was recorded. Ranges from 1-12 for January - December} 
#'   \item{`0-15`}{dbl denoting monthly price of brown shrimp for the 0-15/lb. size class}
#'   \item{`15-20`}{dbl denoting monthly price of brown shrimp for the 15-20/lb. size class}
#'   \item{`20-25`}{dbl denoting monthly price of brown shrimp for the 20-25/lb. size class}
#'   \item{`25-30`}{dbl denoting monthly price of brown shrimp for the 25-30/lb. size class}
#'   \item{`30-40`}{dbl denoting monthly price of brown shrimp for the 30-40/lb. size class}
#'   \item{`40-50`}{dbl denoting monthly price of brown shrimp for the 40-50/lb. size class}
#'   \item{`50-67`}{dbl denoting monthly price of brown shrimp for the 50-67/lb. size class}
#'   \item{Pieces}{dbl denoting monthly price of pieces of shrimp totalling a pound}
#' }
#' @source \url{https://www.pnas.org/content/114/7/1512/tab-figures-data}
"shrimp"
```
\

[commit]

Modify the descriptions to match your dataset. This is you drafting the üìù menu for your sushi. 

* `@format` describes the dataset basics, including a description of what each of the variables are.
* `@source` should describe where you got this data. Most of the time this is a url, but not nessarily.o

:::tip
**Note:** To read more about Roxygen comments, check out [6.3 Roxygen Comments, R Packages](images/pkg/https://r-pkgs.org/man.html).
:::


9. Our üìù menu is drafted but not yet accessible by the package. Use `devtools::document()` to make the roxygen comRents "concrete". 

```{r, eval=FALSE}
devtools::document()
```

This generates a `.Rd` file, that makes our documentation accessible to the package. Our official documentation (think Chef üë®
üç≥ `r emo::jis(male-cook)`, providing a tableside reading of the menu) lives inside a newly-generated `man/` folder.


Now we can check that our documentation works:

* Call `?shrimp`, substituting the name of your data set.
* If everything looks good, then you're done! If not, edit the Roxygen-style comments in the .R file and `document()` again until you're satisfied.

<br>

<center>![](images/pkg/datadoc.png){width=500px}</center>

<br>



## PART 3: (Optionally) Edit DESCRIPTION file

You can also edit the `DESCRIPTION` file to fill in the author (your) info and other descriptive info about the package:

<br>

<center>![](images/pkg/description.png){width=500px}</center>

<br>

[Commit again]
  
<br>

:::tip
**FYI**: At this point in package-making is when you could begin to create custom functions if you wanted to (e.g. [as described here](https://r-pkgs.org/whole-game.html#write-the-first-function) and [here](https://r-mageddon.netlify.com/post/writing-an-r-package-from-scratch/), but this is not a goal of the present tutorial).
:::

<br>

## Step 4: Build!

<center>![](images/pkg/Build.jpg){width=400px}</center>


The minimum package structure is in place, and now we go to `Build` > `Install and Restart` to make the package "official". And you're done!...well, kind of. Your package doesn't have anything useful in it (yet), but it does exist.

<br>

## Step 5: Deliver

Anyone can now install your package with the following code, substituting the field in quotes with your own GitHub username and package name:

```{r, eval=FALSE}
# install.packages("remotes")
remotes::install_github("rstudio4edu/testpackage")

```

<br>

We next demonstrate how to include custom data in package.

<br>

## PART 2: Including data sets {-}
Assuming you have followed the previous steps for building the basic structure of a package, we now demonstrate how to package up some data for your students. 

<br>

### Why do this? {-}
What if you'd like your students to work with a specific data set? Should you email them an excel or .csv file or upload it onto an oustide learning platform? No! You can include data sets in your package, ready to be summoned with the call of an object name. This saves precious instruction time that might otherwise be wasted and also helps students get to the fun stuff (analysis!) faster.

<br>

<br>

### Step 1: Add raw data file {-}

* Call `usethis::use_data_raw` to create a folder called `data-raw/`. We will use this folder as a general storage space for any raw data files, data pre-processing scripts, etc. that we don't want to be built into our final package.

```{r, eval=FALSE}
use_data_raw()
```
  
This new folder houses a `DATASET.R` script. 
  
  <center>![](images/pkg/datasetr.png){width=500px}</center>
  
<br>

* Add your raw data file to the `data-raw` folder. I am adding a `.csv` file called `aggression_behavior.csv`. 
 
 <center>![](images/pkg/data-raw.png){width=500px}</center>
 
<br>

:::tip
**Note**: It's always a good idea to start with the most unprocessed, messy version of the data in the `data-raw/` folder along with scripts to clean it up so that your workflow is reproducible. 
:::


<br>

 
### Step 2: Save clean data to `data/` {-}

Edit the `DATASET.R` script:

* Read in the `.csv` file containing our raw data.
* Include any code necessary for processing or cleaning to ready the data set as you'd like it to be presented in the package.
* Run `usethis::use_data()` which will export an `.rda`-formatted data file to a new folder, `data`. Any data in this folder will be accessible to the user.

[SHOULD WE MENTION ANYTHING ABOUT HERE::HERE?] 

```{r, eval = FALSE}
## code to prepare `DATASET` dataset goes here

# Read in your .csv file
aggression_behavior <- readr::read_csv(here::here("data-raw", "aggression_behavior.csv"))

# Include any processing steps here as well

# Export to `data/` as .rda file
usethis::use_data(aggression_behavior, overwrite = TRUE) # add overwrite option
```

<br>

<center> ![](images/pkg/rdafile.png){width=500px}</center>

<br>


:::tip
**FYI**: The reason .rda (also called .RData) files are use in packaged data sets is because this data file format is much faster to read in than .csv files.
:::


<br>

Your data is now callable! Check that you can access your data.

* Click *Build* > *Load All*
* Print your data set object:

```{r, eval=FALSE}

aggression_behavior

# A tibble: 214 x 11
   focal compound birthyr obyear  rank `infant?` attack_all chase_all threatcontact_a‚Ä¶
   <chr> <chr>      <dbl>  <dbl> <dbl> <chr>          <dbl>     <dbl>            <dbl>
 1 bs9   a1          2003   2008     3 N                  0         0            0    
 2 gk3   a1          1991   2007     1 Y                  0         0            0    
 3 se8   a1          2001   2008     1 N                  0         0            0    
 4 qq8   a1          2001   2008     3 N                  0         0            2.23 
 5 vd8   a1          2001   2008     3 Y                  0         0            0.998
 6 qv5   a1          1996   2008     3 Y                  0         0            0    
 7 sr8   a1          2001   2008     2 N                  0         0            0    
 8 pk8   a1          2001   2008     2 Y                  0         0            0    
 9 oz4   a1          1994   2008     1 N                  0         0            0    
10 hv5   a1          1996   2007     2 N                  0         0            0    
# ‚Ä¶ with 204 more rows, and 2 more variables: threatnocontact_all <dbl>, agg_in <dbl>
> 
```

\

:::
**Note**: If you later decide to update the underlying raw .csv file, you will have to manually run the script in Step 2 again before re-building, loading, installing the package. The reason is that when packages are built, loaded, installed, etc., any contents in `data-raw/` are ignored by default.
:::


\

### Step 3: Document the data set {-}
Because this will be a data set that is shared with others, it's important to add reference documentation for it.

* Use `usethis::use_r()` with your data set name in quotes.

```{r, eval=FALSE}

use_r("aggression_behavior")
```

This generates a `.R` script that lives in the `R/ folder`. 

<br>

<center> ![](images/pkg/Rfiledataset.png){width=500px}</center>

<br>

Add information about the data set:

- In the .R file, add the name of the data set object in quotes. 
- Above the quoted object name, paste in specially-formatted comments (see the example below), called Roxygen comments.
- Manually edit the information to reflect the columns in your data set.


This is what will become our documentation. 

```{r, eval=FALSE}
#' Data of aggression behaviors observed in rhesus macaques
#'
#'
#'
#' @format A data frame with 214 rows representing individual "focal" rhesus and 11 variables:
#' \describe{
#'   \item{focal}{character denoting the subject ID of the rhesus}
#'   \item{compound}{a character indicating the social group the focal belongs to}
#'   \item{birthyr}{dbl denoting focal's year of birth}
#'   \item{obyear}{dbl denoting year of behavioral observation when data were collected on the focal}
#'   \item{rank}{dbl denoting high, middle, or low social rank of the focal (1, 2, or 3)}
#'   \item{infant?}{character denoting whether or not the focal had an infant less than 1 year old during time of observation}
#'   \item{attack_all}{average number of times an attack was intitiated by the }
#'   \item{chase_all}{a character string giving given name}
#'   \item{threatcontact_all}{a character string giving given name}
#'   \item{agg_in}{number of times aggression was initiated by the focal}
#' }
#' @source aggression_behavior.csv file
"aggression_behavior"
```

<br> 

:::tip
**Note:** To read more about Roxygen comments, check out [6.3 Roxygen Comments, R Packages](images/pkg/https://r-pkgs.org/man.html).
:::


* Use `devtools::document()` to make the roxygen comments "concrete". 

```{r, eval=FALSE}
#install.packages(c("devtools", "roxygen2"))
library(roxygen2)
library(devtools)

document()
```

This generates a `.Rd` file, that makes our documentation accessible to the package. [PHRASING?] This file lives inside a newly-generated `man/` folder.

<br>

<center>![](images/pkg/manfolder.png){width=500px}</center>

<br>

Now we can check that our documentation works:

* Call `? aggression_behavior`, substituting the name of your data set.
* If everything looks good, then you're done! If not, edit the roxygen-style comments in the .R file and `document()` again until you're satisfied.

<br>

<center>![](images/pkg/datadoc.png){width=500px}</center>

<br>



### Step 4:  Build and install {-}

* As before, click on *Install and Restart* under the *Build* tab.

Here's a review of all the data package steps so far:

![](images/pkg/datapackagemap.jpg)

<br>

Congratulations, your package now includes a documented data set! It can be downloaded and installed as recommeded in **Step 5: Deliver** of **Part 1**. 

If you'd like to create a worksheet-like component for your package, continue with **Part 3**. Otherwise, skip to **Final Steps** for some recommendations on a couple final (and optional) package components.

<br>


